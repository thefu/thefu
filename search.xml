<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android中view的理解</title>
    <url>/2022/09/25/Android%E4%B8%ADview%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<h3 id="View是什么？"><a href="#View是什么？" class="headerlink" title="View是什么？"></a>View是什么？</h3><p>View是屏幕上的一块矩形区域，它负责用来显示一个区域，并且响应这个区域内的事件。可以说，手机屏幕上的任意一部分看得见的地方都是view，它很常见，比如TextView、imageview、button、以及linearLayout、relativelayout都是继承于view的。<br>对于activity来说，我们通过setContentView添加的布局到activity上，实际上都是添加到了activity内部的decorview上面，这个DecorView，其实就是一个FrameLayout，因此实际上，我们的布局是添加到了FrameLayout里面。</p>
<h2 id="View绘制的三个流程"><a href="#View绘制的三个流程" class="headerlink" title="View绘制的三个流程"></a>View绘制的三个流程</h2><p>我们知道，在自定义view的时候一般需要重写父类的onMeasure()、onLayout()、onDraw()三个方法，来完成视图的展示过程。当然，这三个暴露给开发者重写的方法只不过是整个绘制流程的冰山一角，更多复杂的幕后工作，都让系统给代劳了，一个完整的绘制流程包括measure、layout、draw三个步骤，其中：<br>measure：测量。系统会现根据xml布局文件和代码中对控件属性的设置，来获取或者计算出每个view和viewgroup的尺寸，并将这些尺寸保存下来。<br>layout：布局。根据测量出的结果以及对应的参数，来确定每一个控件应该显示的位置。<br>draw：绘制。确定好位置后，就将这些控件绘制到屏幕上。</p>
<h2 id="Android视图层次结果简介"><a href="#Android视图层次结果简介" class="headerlink" title="Android视图层次结果简介"></a>Android视图层次结果简介</h2><p>在介绍view绘制流程之间，咱们先接单介绍一下Android视图层次结果以及DecorView因为view的绘制流程的入口和DecorView有着密切的联系。</p>
<p>咱们平时看到的视图，其实存在如上的嵌套关系。上图是针对比较老的Android系统版本中制作的，新的版本中会略有出入，还有一个状态栏，但整体上没变。我们平时在activity中setContentView(…)中对应layout内容，对应的是上图中viewgrop的树状结构，实际上添加到系统中时，会再裹上一层FrameLayout，就是上图中最里面的浅蓝色部分。<br>这里咱们再通过一个实例来继续查看。Androidstudio工具中提供了一个布局观察期工具，通过Tools &gt; android &gt; layout Inspector可以查看具体某个activity的布局情况。下图中，左边树状结果对应了右边的可视图，可见DecorView就是整个界面的根视图，对应右边的红色框，是整个屏幕的大小。黄色边框为状态栏部分；那个绿色边框中有两个部分，一个是白框中的actionBar，对应了上图中紫色部分的TitleActionBar部分，即标题栏，平时咱们可以在activity中将其隐藏掉；另外一个蓝色边框部分，对应上图中最里面的蓝色部分，即contentview部分，下图中左边有两个蓝色框，上面那个中有个布局”content_layout”，咱们能通过layout布局文件直接完全操作的也就是这一块，当其被add到视图系统中时，会被过上contentFramelayout（显然是FrameLayout的子类），这也就是为什么添加到layout.xml视图的方法叫setContentView()而不叫setView()的原因了。</p>
<h2 id="故事开始的地方"><a href="#故事开始的地方" class="headerlink" title="故事开始的地方"></a>故事开始的地方</h2><p>如果对activity的启动流程有一定的了解的话，应该知道这个启动会在activityThread.java类中完成，在启动activity的过程中，会调用handleResumeActivity()方法，关于视图的绘制过程最初就是从这个方法开始的。</p>
<h3 id="1-view绘制起源UML时序图"><a href="#1-view绘制起源UML时序图" class="headerlink" title="1.view绘制起源UML时序图"></a>1.view绘制起源UML时序图</h3><p>整个调用链如下图所示，知道ViewRootImpl类中的performTraversals()中，才正式开始绘制流程了，所以一般都是以该方法作为正式绘制的源头。</p>
<h3 id="2-handResumeActivity-方法"><a href="#2-handResumeActivity-方法" class="headerlink" title="2.handResumeActivity()方法"></a>2.handResumeActivity()方法</h3><p>在这先大致看一下ActivityThread类中的handleResumeActivity方法，咱们这里只贴出关键代码：<br><code>//===========ActivityThread.java========== final void handleResumeActivity(...) &#123;     ......     //跟踪代码后发现其初始赋值为mWindow = new PhoneWindow(this, window, activityConfigCallback);     r.window = r.activity.getWindow();        //从PhoneWindow实例中获取DecorView     View decor = r.window.getDecorView();     ......     //跟踪代码后发现，vm值为上述PhoneWindow实例中获取的WindowManager。     ViewManager wm = a.getWindowManager();     ......     //当前window的属性，从代码跟踪来看是PhoneWindow窗口的属性     WindowManager.LayoutParams l = r.window.getAttributes();     ......     wm.addView(decor, l);     ...... &#125;</code><br>上述代码第八行中，ViewManager是一个接口，addView是其中定义一个空方法，WindowManager是其子类，WindowManagerImpl是WindowManager的实现类，在第四行代码中的r.window的值可以根据Activity.java的如下代码得知，其值为PhoneWindow实例。<br>&#96;&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Activity.java&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>private Window mWindow;<br>public Window getWindow() {<br>   return mWindow;<br>}</p>
<p>final void attach(…){<br>   ……<br>   mWindow &#x3D; new PhoneWindow(this, window, activityConfigCallback);<br>   ……<br>}&#96;</p>
<h3 id="3-两个重要参数分析"><a href="#3-两个重要参数分析" class="headerlink" title="3.两个重要参数分析"></a>3.两个重要参数分析</h3><p>之所以要在这里特意分析handleResumeActivity()方法，除了因为它是整个绘制流程的最初源头外，还有就是addView的两个参数比较重要，它们经过一层一层传递后进入到ViewRootImpl中，在后面分析绘制中要用到。这里再看看这两个参数的相关信息：<br>（1）参数dector<br>&#96;&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Activity.java&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>private Window mWindow;<br>public Window getWindow() {<br>   return mWindow;<br>}</p>
<p>final void attach(…){<br>   ……<br>   mWindow &#x3D; new PhoneWindow(this, window, activityConfigCallback);<br>   ……<br>}<code>可见decor参数表示的是DecorView实例，注释中也有说明：这是window的顶级视图，包含了window的decor （2）参数l</code>&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Window.java&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>&#x2F;&#x2F;The current window attributes.<br>    private final WindowManager.LayoutParams mWindowAttributes &#x3D;<br>        new WindowManager.LayoutParams();<br>……<br>public final WindowManager.LayoutParams getAttributes() {<br>        return mWindowAttributes;<br>    }<br>……</p>
<p>&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;WindowManager.java的内部类LayoutParams extends ViewGroup.LayoutParams&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>public LayoutParams() {<br>            super(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);<br>            ……<br>        }</p>
<p>&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;ViewGroup.java内部类LayoutParams&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>public LayoutParams(int width, int height) {<br>            this.width &#x3D; width;<br>            this.height &#x3D; height;<br>        }&#96;<br>该参数表示的是PhoneWindow的LayoutParams属性，其width和height值均为LayoutParmas.MATCH_PARENT。<br>在源码中，WindowPhone和DecorView通过组合方法联系在一起的，而DecorView是整个View体系的根View。在前面handleResumeActivity()方法代码片段中，当Activity启动后，就通过第14行的addView方法，来间接调用ViewRootImpl类中的performTraversals()，从而实现视图的绘制。</p>
]]></content>
  </entry>
  <entry>
    <title>如何解决hexo首页显示博客的全部文章</title>
    <url>/2022/09/25/%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3hexo%E9%A6%96%E9%A1%B5%E6%98%BE%E7%A4%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%85%A8%E9%83%A8%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<p>在第一次书写博客后，应该会发现自己整篇博客的文章都在这个首页中显示，可能一个两个还好，但是越往后，自己写的博客越多，全都放在首页堆积，就会显得十分臃肿</p>
<span id="more"></span>

<h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p><code>首页在主题的_config.yml中把设置打开：（安装时默认就打开了） excerpt_description: true</code></p>
<h3 id="方法一：写概述"><a href="#方法一：写概述" class="headerlink" title="方法一：写概述"></a>方法一：写概述</h3><p>在文章的front-matter中（即new一个博客时生成的内容里）添加description，其中description中的内容就会被显示到首页上，其余一律不显示。<br><code>title: 让首页显示部分内容 date: 2020-02-23 22:55:10 description: 这是显示在首页的概述，正文内容均会被隐藏。</code><br>比较不方便的是还需要写一个概述，很多时候懒得写概述，于是就需要第二种方法了。</p>
<h3 id="方法二：文章截断"><a href="#方法二：文章截断" class="headerlink" title="方法二：文章截断"></a>方法二：文章截断</h3><p>在需要截断的地方加入：<br><code>&lt;!--more--&gt;</code><br>首页就会显示这条以上的所有内容，隐藏接下来的内容。比如本文就是使用了这种方法<br>这个明显就方便许多，当然有利有弊，比如开头都是废话的首页开着就不是很爽，因此我一般会先选择方法二，如果感觉文章前面写的不好就用方法一。</p>
]]></content>
  </entry>
  <entry>
    <title>深入理解进程和线程</title>
    <url>/2022/09/21/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p>平时helloworld这样的程序在现代系统上运行时，操作系统会提供一种假象，就好像系统上只有这个程序在运行。程序看上去是独占地使用处理器、主存和IO设备。处理器看上去就像在不间断地一条接一条执行程序中的指令，即该程序的代码和数据是系统内存中唯一的对象，这些假象是通过进程的概念来实现的，进程是计算机科学中最重要和最成功的概念之一。<br>进程是操作系统对一个正在运行的程序的一种抽象。在一个系统上可以同时运行多个进程，而每个进程都好像在独占地使用硬件。而并发运行，则是说一个进程的指令和另一个进程的指令是交错执行的。在大多数系统中。需要运行的进程数是多于可以运行它们的CPU个数的。传统系统在一个时刻只能执行一个程序，而先进的多核处理器同时能够执行多个程序。无论是在单核还是在多核系统中，一个CPU看上去都像是在并发执行多个进程，这是通过处理器在进程间切换来实现的。操作系统实现这种交错执行的机制称为上下文切换。（为了简化，下面的讨论我们只考虑包含一个CPU的单处理器系统的情况）<br>操作系统保持跟踪进程运行所需的所有状态信息。这种状态，也就是上下文，包括许多信息，比如PC和寄存器文件的当前值，以及主存的内容。在任何一个时刻，单处理器系统都只能执行一个进程的的代码，当操作系统决定要把控制权从当前进程转移到某个新进程时，就会进行上下文切换，及保存当前进程的上下文，恢复新进程的上下文，然后将控制权传递到新进程。新进程就会从它上次停止的地方开始。下图展示了程序运行场景的基本理念。<br><img src="https://s3.bmp.ovh/imgs/2022/09/25/9a7e5808598c7948.jpg"><br>示例场景中有两个并发的进程：shell进程和hello进程。最开始，只有shell进程在运行，即等待命令行上的输入。当我们让它运行hello程序时，shell通过调用一个专门的函数，即系统调用，来执行我们的请求，系统调用会将控制权传递给操作系统。操作系统保存shell进程的上下文，创建一个新的hello进程以及其上下文，然后将控制权传给新的hell咯进程。hello进程终止后，操作系统恢复shell进程的上下文，并将控制权传回给它，shell进程会继续等待下一个命令行输入。<br>如上图所示，从一个进程到另一个进程的转换是由操作系统内核管理的，内核时操作系统代码常驻主存的部分。当应用程序需要操作系统的某些操作时，比如读写文件，它就执行一条特殊的系统调用（system call）指令，将控制权传递给内核。然后内核执行被请求的操作并返回应用程序。注意，内核不是一个独立的进程。相反，它是系统管理全部进程所用代码和数据结构的集合。<br>实现进程这个抽象概念需要低级硬件和操作系统软件之间紧密合作。</p>
<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>尽管通常我们认为一个进程只有单一的控制流，但是在现代系统中，一个进程实际上可以由多个称为线程的执行单元组成，每个线程都运行在进程的上下文中，并共享同样的代码和全局数据。由于网络服务器中对并行处理的需求，线程称为越来越重要的编程模型，因为多线程之间比多进程之间更容易共享数据，也因为线程一般来说都比进程更高效。当有多处理器可用的时候，多线程也是一种使得程序可以运行得更快得方法。</p>
<h2 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h2><p>虚拟内存是一个抽象概念，它为每个进程提供一个假象，即每个进程都在独占地使用主存。每个进程看到内存都是一致得，称为虚拟地址空间。下图所示是Linux进程的虚拟地址空间（其他Unix系统的设计也与此类似）。在Linux中，地址空间最上面的区域是保留给操作系统中的代码和数据的，这对所有进程来说都是一样的。地址空间的底部区域存放用户进程定义的代码和数据。请注意，途中的地址是从下往上增大的。<br><img src="https://s3.bmp.ovh/imgs/2022/09/25/39151a55fce31299.png"><br>每个进程看到的虚拟地址空间由大量准确定义的区构成，每个区都有专门的功能，以下从最低的地址开始，逐步向上介绍：</p>
<h3 id="程序代码和数据"><a href="#程序代码和数据" class="headerlink" title="程序代码和数据"></a>程序代码和数据</h3><p>对所有的进程来说，代码是从同一固定地址开始，紧接着的是和PC全局变量相对应的数据位置。代码和数据区是直接按照可执行目标文件的内容初始化的，在示例中就是可执行文件hello，</p>
<h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p>代码和数据区后紧随着的是运行时堆。代码和数据区在进程一开始运行时就被制定了大小，与此不同，当调用像malloc和free这样的C标准库函数时，堆可以在运行时动态地扩展和收缩。</p>
<h3 id="共享库"><a href="#共享库" class="headerlink" title="共享库"></a>共享库</h3><p>大约在地址空间中的中间部分是一块用来存放像C标准库和数学库这样的共享库的代码和数据的区域，共享库的概念非常强大，</p>
<h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>位于用户虚拟地址空间顶部的是用户栈，编译器用它来实现函数调用，和堆一样，用户栈在程序执行期间可以动态地扩展和收缩。特别地，每次我们调用一个函数时，栈就会增长；从一个函数返回时，栈就会收缩。</p>
<h3 id="内存虚拟内存"><a href="#内存虚拟内存" class="headerlink" title="内存虚拟内存"></a>内存虚拟内存</h3><p>地址空间顶部的区域是为内核保留的，不允许应用程序读写这个区域的内容或者直接调用呢耦合代码定义的函数。相反，它们必须调用内核来执行这些操作</p>
<p>虚拟内存的运作需要硬件和操作系统软件之间精密复杂的交互，包括对处理器生成的每个地址的硬件编译。其基本思想是把一个进程虚拟内存的内容存储在磁盘上，然后主存作为磁盘的高速缓存，</p>
<h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><p>文件就是字节序列，仅此而已。每个IO设备，包括磁盘，键盘，显示器，甚至网络，都可以看成是文件，系统中所有输入输出都是通过使用一小组称为Unix I&#x2F;O的系统函数调用读写文件按来实现的<br>文件这个简单而精致的概念是非常强大的，因为它向应用程序中提供了一个统一的试图，来看待系统中可能含有的所有各式各样的I&#x2F;O设备。例如，处理磁盘文件内容的应用程序员可以非常幸福，因为他们无需了解具体的磁盘技术，进一步说，同一个程序可以在使用不同磁盘技术的不同系统上运行。</p>
]]></content>
  </entry>
  <entry>
    <title>GitHub+Hexo搭建个人博客网站</title>
    <url>/2022/09/18/GitHub-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<h2 id="什么是hexo？"><a href="#什么是hexo？" class="headerlink" title="什么是hexo？"></a>什么是hexo？</h2><p>Hexo是一款基于Node.js的静态博客框架，特点是快速，简介并且高效的博客框架，Hexo使用Markdown解析文章，在几秒内，即可利用靓丽的主题生成静态网页。它可以方便的生成静态网页托管在GitHub和其他托管平台上，是搭建博客的首选框架。</p>
<span id="more"></span>
<h2 id="什么是github？"><a href="#什么是github？" class="headerlink" title="什么是github？"></a>什么是github？</h2><p>GitHub是一个在线软件源代码托管服务平台，使用Git作为版本控制软件，是世界上最大的代码托管网站和开源社区。我们使用的是github上的一个服务，GitHub Pages，它是由GitHub提供的一个网页寄存服务，可以用于存放静态网页，包括博客，项目文档甚至整本书。一般GitHub Pages使用github.io的子域名，但是用户也可以使用第三方域名。</p>
<h2 id="搭建步骤："><a href="#搭建步骤：" class="headerlink" title="搭建步骤："></a>搭建步骤：</h2><h3 id="1-GitHub创建个人仓库"><a href="#1-GitHub创建个人仓库" class="headerlink" title="1.GitHub创建个人仓库"></a>1.GitHub创建个人仓库</h3><p>登录到GitHub，如果没有GitHub账号，使用你的邮箱注册GitHub账号，点击GitHub中的New repository创建新仓库，仓库名应该为：“用户名.github,io”这个用户名使用你的github账号名称代替，这是一个相对固定的写法。</p>
<h3 id="2-安装git"><a href="#2-安装git" class="headerlink" title="2.安装git"></a>2.安装git</h3><p>什么是git？简单来说Git是开源的分布式版本控制系统，用于敏捷高效的处理项目。我们网站在本地搭建好了，需要使用Git同步到GitHub上，推荐一个巨好的<a href="http://git.oschina.net/progit/index.html">git教程</a>。<br>安装成功后，将你的Git与GitHub账号绑定，鼠标右击打开Git Bash，设置user.name和user.eamil配置信息：<br>git config –global user.name “你的GitHub用户名”<br>git config –global user.email “你的GitHub注册邮箱”<br>生成ssh密钥文件：<br>ssh-keygen -t rsa -C “你的GitHub注册邮箱”<br>然后直接三个回车即可，默认不需要设置密码<br>然后找到生成的.ssh文件夹中的id_rsa.pub密钥，将内容全部复制<br>打开GitHub_Settings_keys页面，新建new SSH Key<br>Title为标题，任意填写即可，将刚刚复制的id_rsa.pub内容粘贴进去，最后点击Add SSH Key。<br>在git bash中检测GitHub公钥是否成功，输入ssh <a href="mailto:&#103;&#x69;&#116;&#x40;&#103;&#x69;&#x74;&#x68;&#117;&#x62;&#x2e;&#99;&#x6f;&#x6d;">&#103;&#x69;&#116;&#x40;&#103;&#x69;&#x74;&#x68;&#117;&#x62;&#x2e;&#99;&#x6f;&#x6d;</a><br>这里之所以设置GitHub密钥的原因是，通过非对称加密的公钥与私钥来完成加密，公钥放置在github上，私钥放置在自己的电脑里。github要求每次推送代码都是合法用户，所以每次推送都要输入账号密码验证推送用户是否合法用户，为了省去每次输入密码的步骤，采用ssh，当你推送的时候，git就会匹配你的私钥跟github上面的公钥是否是配对的，若是匹配就认为你是合法用户，则允许推送。</p>
<h3 id="3-安装Node-js"><a href="#3-安装Node-js" class="headerlink" title="3.安装Node.js"></a>3.安装Node.js</h3><p>Hexo基于Node.js，<a href="https://nodejs.org/en/download/">Node.js下载地址</a>，注意安装node.js会包含环境变量及npm的安装，安装后，检测node.js是否安装成功，在命令行输入node -v，检测npm是否安装成功，npm -v<br>到这儿，安装Hexo的环境已经全部搭建完成。</p>
<h3 id="4-安装Hexo"><a href="#4-安装Hexo" class="headerlink" title="4.安装Hexo"></a>4.安装Hexo</h3><p>hexo就是我们的个人博客网站的框架，这里需要自己在电脑里创建一个文件夹，可以命名为Blog，Hexo框架与以后你自己发布的网页都在这个文件夹中，创建好后，进入文件夹中，打开命令行窗口。<br>使用npm命令安装Hexo，输入：<br>npm install -g hexo-cli<br>这个安装时间较长耐心等待，安装完成后，初始化我们的博客，输入：<br>hexo init blog<br>注意：这里的命令都是作用在刚刚创建的blog文件夹中。<br>在命令行中输入启动命令：<br>hexo server<br>打开浏览器哦网址可以看到网站的样式</p>
<h3 id="5-推送网站"><a href="#5-推送网站" class="headerlink" title="5.推送网站"></a>5.推送网站</h3><p>上面只是在本地预览，接下来要做的就是推送网站，也就是发布网站，让我们的网站可以被更多人访问到。在设置之前，需要解释一个概念，在blog根目录里的_config.yml文件称为站点配置文件<br>进入themes文件夹，里面也有个_config.yml文件，这个称为主题配置文件<br>现在需要做的是将我们的Hexo和GitHub关联起来，打开站点的配置文件_config.yml，翻到最后修改为：<br>deploy:<br>type: git<br>repo: 这里填入你之前在GitHub上创建仓库的完整历经，记得加上.git<br>branch: master<br>保存站点配置文件。<br>其实就是给hexo d这个命令做相应的配置，让hexo知道你要把blog部署在哪个位置，很显然，我们部署在我们GitHub的仓库里，最后安装git部署插件，输入命令：<br>npm install hexo-deployer-git –save<br>这时，我们分别输入三条命令：<br>hexo clean<br>hexo g<br>hexo d<br>其实第三条hexo d就是部署网站的命令，d是deploy的缩写，完成后，打开浏览器，在地址栏输入你的放置个人网站的仓库路径，你就可以发现你的博客已经上线了，可以在网络上被访问到。</p>
<h2 id="常用hexo命令及解释"><a href="#常用hexo命令及解释" class="headerlink" title="常用hexo命令及解释"></a>常用hexo命令及解释</h2><p>hexo init [folder]<br>新建一个网站。如果没有设置folder，Hexo默认在目前的文件夹建立网站。<br>本命令相当于执行了以下几步：<br>1.Git clone <a href="https://github.com/hexojs/hexo-starter">hexo-starter</a>和<a href="https://github.com/hexojs/hexo-theme-landscape">hexo-theme-landscape</a>主题到当前目录或者指定目录<br>2.使用<a href="https://classic.yarnpkg.com/lang/en/">Yarn 1</a>、<a href="https://pnpm.js.org/">pnpm</a>或者<a href="https://docs.npmjs.com/cli/install">npm</a>包管理器下载依赖（如有已安装多个，则列在前面的优先）。npm默认随<a href="https://hexo.io/docs/#Install-Node-js">Node.js</a>安装。</p>
<p>hexo new [layout] &lt;title&gt;<br>新建一篇文章。如果没有设置layout的话，默认使用_config.yml中的default_layout参数代替，如果标题包含空格的话，请使用引号括起来。<br>默认情况下，Hexo会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo会创建一个以标题为名字的目录，并在目录中放置一个index.md文件。你可以使用–path参数覆盖上述行为、自行决定文件的目录：<br>hexo new page –path about&#x2F;me “About me”<br>以上命令会创建一个source&#x2F;about&#x2F;me.md，同时me.md的Front Matter中的title为“page”。这是因为在上述命令中，hexo-cli将page视为指定文章的标题，并采用默认的layout</p>
<p>hexo generate<br>生成静态文件。</p>
<p>hexo publish [layout] &lt;filename&gt;<br>发表草稿</p>
<p>hexo server<br>启动服务器，默认情况下，访问地址为：<br><a href="http://localhost:4000/%E3%80%82">http://localhost:4000/。</a></p>
<p>hexo deploy<br>部署网站。</p>
<p>hexo clean<br>清楚缓存文件（db.json）和已生成的静态文件（public)。在某些情况下（尤其是更换主题后）,如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p>
<p>hexo list &lt;type&gt;<br>列出网站资料</p>
<h3 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h3><p>hexo –safe<br>在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p>
<p>hexo –debug<br>在终端中显示调试信息并记录到debug.log。当您碰到问题时，可以尝试用调试模式重新执行一次，并<a href="https://github.com/hexojs/hexo/issues/new">提交调式信息到GitHub</a>.</p>
<p>hexo –silent<br>隐藏终端信息。</p>
<p>更多详情可以查看<a href="https://zhuanlan.zhihu.com/p/26625249">此篇文档</a></p>
]]></content>
      <categories>
        <category>hexo博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
